/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package tech.pegasys.teku.bls.impl.blst.swig;

public class blst {
  public static void scalar_from_uint32(scalar ret, long[] a) {
    blstJNI.scalar_from_uint32(scalar.getCPtr(ret), ret, a);
  }

  public static void uint32_from_scalar(long[] ret, scalar a) {
    blstJNI.uint32_from_scalar(ret, scalar.getCPtr(a), a);
  }

  public static void scalar_from_uint64(scalar ret, SWIGTYPE_p_unsigned_long_long a) {
    blstJNI.scalar_from_uint64(scalar.getCPtr(ret), ret, SWIGTYPE_p_unsigned_long_long.getCPtr(a));
  }

  public static void uint64_from_scalar(SWIGTYPE_p_unsigned_long_long ret, scalar a) {
    blstJNI.uint64_from_scalar(SWIGTYPE_p_unsigned_long_long.getCPtr(ret), scalar.getCPtr(a), a);
  }

  public static void scalar_from_bendian(scalar ret, byte[] a) {
    blstJNI.scalar_from_bendian(scalar.getCPtr(ret), ret, a);
  }

  public static void bendian_from_scalar(byte[] ret, scalar a) {
    blstJNI.bendian_from_scalar(ret, scalar.getCPtr(a), a);
  }

  public static void scalar_from_lendian(scalar ret, byte[] a) {
    blstJNI.scalar_from_lendian(scalar.getCPtr(ret), ret, a);
  }

  public static void lendian_from_scalar(byte[] ret, scalar a) {
    blstJNI.lendian_from_scalar(ret, scalar.getCPtr(a), a);
  }

  public static int scalar_fr_check(scalar a) {
    return blstJNI.scalar_fr_check(scalar.getCPtr(a), a);
  }

  public static void p1_add(p1 out, p1 a, p1 b) {
    blstJNI.p1_add(p1.getCPtr(out), out, p1.getCPtr(a), a, p1.getCPtr(b), b);
  }

  public static void p1_add_or_double(p1 out, p1 a, p1 b) {
    blstJNI.p1_add_or_double(p1.getCPtr(out), out, p1.getCPtr(a), a, p1.getCPtr(b), b);
  }

  public static void p1_add_affine(p1 out, p1 a, p1_affine b) {
    blstJNI.p1_add_affine(p1.getCPtr(out), out, p1.getCPtr(a), a, p1_affine.getCPtr(b), b);
  }

  public static void p1_add_or_double_affine(p1 out, p1 a, p1_affine b) {
    blstJNI.p1_add_or_double_affine(p1.getCPtr(out), out, p1.getCPtr(a), a, p1_affine.getCPtr(b), b);
  }

  public static void p1_double(p1 out, p1 a) {
    blstJNI.p1_double(p1.getCPtr(out), out, p1.getCPtr(a), a);
  }

  public static void p1_mult_w5(p1 out, p1 p, scalar scalar, long nbits) {
    blstJNI.p1_mult_w5(p1.getCPtr(out), out, p1.getCPtr(p), p, scalar.getCPtr(scalar), scalar, nbits);
  }

  public static void p1_cneg(p1 p, long cbit) {
    blstJNI.p1_cneg(p1.getCPtr(p), p, cbit);
  }

  public static void p1_to_affine(p1_affine out, p1 in) {
    blstJNI.p1_to_affine(p1_affine.getCPtr(out), out, p1.getCPtr(in), in);
  }

  public static void p1_from_affine(p1 out, p1_affine in) {
    blstJNI.p1_from_affine(p1.getCPtr(out), out, p1_affine.getCPtr(in), in);
  }

  public static int p1_affine_on_curve(p1_affine p) {
    return blstJNI.p1_affine_on_curve(p1_affine.getCPtr(p), p);
  }

  public static int p1_affine_in_g1(p1_affine p) {
    return blstJNI.p1_affine_in_g1(p1_affine.getCPtr(p), p);
  }

  public static int p1_affine_is_equal(p1_affine a, p1_affine b) {
    return blstJNI.p1_affine_is_equal(p1_affine.getCPtr(a), a, p1_affine.getCPtr(b), b);
  }

  public static void p2_add(p2 out, p2 a, p2 b) {
    blstJNI.p2_add(p2.getCPtr(out), out, p2.getCPtr(a), a, p2.getCPtr(b), b);
  }

  public static void p2_add_or_double(p2 out, p2 a, p2 b) {
    blstJNI.p2_add_or_double(p2.getCPtr(out), out, p2.getCPtr(a), a, p2.getCPtr(b), b);
  }

  public static void p2_add_affine(p2 out, p2 a, p2_affine b) {
    blstJNI.p2_add_affine(p2.getCPtr(out), out, p2.getCPtr(a), a, p2_affine.getCPtr(b), b);
  }

  public static void p2_add_or_double_affine(p2 out, p2 a, p2_affine b) {
    blstJNI.p2_add_or_double_affine(p2.getCPtr(out), out, p2.getCPtr(a), a, p2_affine.getCPtr(b), b);
  }

  public static void p2_double(p2 out, p2 a) {
    blstJNI.p2_double(p2.getCPtr(out), out, p2.getCPtr(a), a);
  }

  public static void p2_mult_w5(p2 out, p2 p, scalar scalar, long nbits) {
    blstJNI.p2_mult_w5(p2.getCPtr(out), out, p2.getCPtr(p), p, scalar.getCPtr(scalar), scalar, nbits);
  }

  public static void p2_cneg(p2 p, long cbit) {
    blstJNI.p2_cneg(p2.getCPtr(p), p, cbit);
  }

  public static void p2_to_affine(p2_affine out, p2 in) {
    blstJNI.p2_to_affine(p2_affine.getCPtr(out), out, p2.getCPtr(in), in);
  }

  public static void p2_from_affine(p2 out, p2_affine in) {
    blstJNI.p2_from_affine(p2.getCPtr(out), out, p2_affine.getCPtr(in), in);
  }

  public static int p2_affine_on_curve(p2_affine p) {
    return blstJNI.p2_affine_on_curve(p2_affine.getCPtr(p), p);
  }

  public static int p2_affine_in_g2(p2_affine p) {
    return blstJNI.p2_affine_in_g2(p2_affine.getCPtr(p), p);
  }

  public static int p2_affine_is_equal(p2_affine a, p2_affine b) {
    return blstJNI.p2_affine_is_equal(p2_affine.getCPtr(a), a, p2_affine.getCPtr(b), b);
  }

  public static void encode_to_g1(p1 out, byte[] msg, byte[] DST, byte[] aug) {
    blstJNI.encode_to_g1(p1.getCPtr(out), out, msg, DST, aug);
  }

  public static void hash_to_g1(p1 out, byte[] msg, byte[] DST, byte[] aug) {
    blstJNI.hash_to_g1(p1.getCPtr(out), out, msg, DST, aug);
  }

  public static void encode_to_g2(p2 out, byte[] msg, byte[] DST, byte[] aug) {
    blstJNI.encode_to_g2(p2.getCPtr(out), out, msg, DST, aug);
  }

  public static void hash_to_g2(p2 out, byte[] msg, byte[] DST, byte[] aug) {
    blstJNI.hash_to_g2(p2.getCPtr(out), out, msg, DST, aug);
  }

  public static void p1_serialize(byte[] out, p1 in) {
    blstJNI.p1_serialize(out, p1.getCPtr(in), in);
  }

  public static void p1_compress(byte[] out, p1 in) {
    blstJNI.p1_compress(out, p1.getCPtr(in), in);
  }

  public static void p1_affine_serialize(byte[] out, p1_affine in) {
    blstJNI.p1_affine_serialize(out, p1_affine.getCPtr(in), in);
  }

  public static void p1_affine_compress(byte[] out, p1_affine in) {
    blstJNI.p1_affine_compress(out, p1_affine.getCPtr(in), in);
  }

  public static BLST_ERROR p1_uncompress(p1_affine out, byte[] in) {
    return BLST_ERROR.swigToEnum(blstJNI.p1_uncompress(p1_affine.getCPtr(out), out, in));
  }

  public static BLST_ERROR p1_deserialize(p1_affine out, byte[] in) {
    return BLST_ERROR.swigToEnum(blstJNI.p1_deserialize(p1_affine.getCPtr(out), out, in));
  }

  public static void p2_serialize(byte[] out, p2 in) {
    blstJNI.p2_serialize(out, p2.getCPtr(in), in);
  }

  public static void p2_compress(byte[] out, p2 in) {
    blstJNI.p2_compress(out, p2.getCPtr(in), in);
  }

  public static void p2_affine_serialize(byte[] out, p2_affine in) {
    blstJNI.p2_affine_serialize(out, p2_affine.getCPtr(in), in);
  }

  public static void p2_affine_compress(byte[] out, p2_affine in) {
    blstJNI.p2_affine_compress(out, p2_affine.getCPtr(in), in);
  }

  public static BLST_ERROR p2_uncompress(p2_affine out, byte[] in) {
    return BLST_ERROR.swigToEnum(blstJNI.p2_uncompress(p2_affine.getCPtr(out), out, in));
  }

  public static BLST_ERROR p2_deserialize(p2_affine out, byte[] in) {
    return BLST_ERROR.swigToEnum(blstJNI.p2_deserialize(p2_affine.getCPtr(out), out, in));
  }

  public static void keygen(scalar out_SK, byte[] IKM, byte[] info) {
    blstJNI.keygen(scalar.getCPtr(out_SK), out_SK, IKM, info);
  }

  public static void sk_to_pk_in_g1(p1 out_pk, scalar SK) {
    blstJNI.sk_to_pk_in_g1(p1.getCPtr(out_pk), out_pk, scalar.getCPtr(SK), SK);
  }

  public static void sign_pk_in_g1(p2 out_sig, p2 hash, scalar SK) {
    blstJNI.sign_pk_in_g1(p2.getCPtr(out_sig), out_sig, p2.getCPtr(hash), hash, scalar.getCPtr(SK), SK);
  }

  public static void sk_to_pk_in_g2(p2 out_pk, scalar SK) {
    blstJNI.sk_to_pk_in_g2(p2.getCPtr(out_pk), out_pk, scalar.getCPtr(SK), SK);
  }

  public static void sign_pk_in_g2(p1 out_sig, p1 hash, scalar SK) {
    blstJNI.sign_pk_in_g2(p1.getCPtr(out_sig), out_sig, p1.getCPtr(hash), hash, scalar.getCPtr(SK), SK);
  }

  public static long pairing_sizeof() {
    return blstJNI.pairing_sizeof();
  }

  public static void pairing_init(pairing new_ctx) {
    blstJNI.pairing_init(pairing.getCPtr(new_ctx), new_ctx);
  }

  public static void pairing_commit(pairing ctx) {
    blstJNI.pairing_commit(pairing.getCPtr(ctx), ctx);
  }

  public static BLST_ERROR pairing_aggregate_pk_in_g2(pairing ctx, p2_affine PK, p1_affine signature, int hash_or_encode, byte[] msg, byte[] DST, byte[] aug) {
    return BLST_ERROR.swigToEnum(blstJNI.pairing_aggregate_pk_in_g2(pairing.getCPtr(ctx), ctx, p2_affine.getCPtr(PK), PK, p1_affine.getCPtr(signature), signature, hash_or_encode, msg, DST, aug));
  }

  public static BLST_ERROR pairing_mul_n_aggregate_pk_in_g2(pairing ctx, p2_affine PK, p1_affine sig, p1_affine hash, java.math.BigInteger scalar, long nbits) {
    return BLST_ERROR.swigToEnum(blstJNI.pairing_mul_n_aggregate_pk_in_g2(pairing.getCPtr(ctx), ctx, p2_affine.getCPtr(PK), PK, p1_affine.getCPtr(sig), sig, p1_affine.getCPtr(hash), hash, scalar, nbits));
  }

  public static BLST_ERROR pairing_aggregate_pk_in_g1(pairing ctx, p1_affine PK, p2_affine signature, int hash_or_encode, byte[] msg, byte[] DST, byte[] aug) {
    return BLST_ERROR.swigToEnum(blstJNI.pairing_aggregate_pk_in_g1(pairing.getCPtr(ctx), ctx, p1_affine.getCPtr(PK), PK, p2_affine.getCPtr(signature), signature, hash_or_encode, msg, DST, aug));
  }

  public static BLST_ERROR pairing_mul_n_aggregate_pk_in_g1(pairing ctx, p1_affine PK, p2_affine sig, p2_affine hash, java.math.BigInteger scalar, long nbits) {
    return BLST_ERROR.swigToEnum(blstJNI.pairing_mul_n_aggregate_pk_in_g1(pairing.getCPtr(ctx), ctx, p1_affine.getCPtr(PK), PK, p2_affine.getCPtr(sig), sig, p2_affine.getCPtr(hash), hash, scalar, nbits));
  }

  public static BLST_ERROR pairing_merge(pairing ctx, pairing ctx1) {
    return BLST_ERROR.swigToEnum(blstJNI.pairing_merge(pairing.getCPtr(ctx), ctx, pairing.getCPtr(ctx1), ctx1));
  }

  public static int pairing_finalverify(pairing ctx, fp12 gtsig) {
    return blstJNI.pairing_finalverify(pairing.getCPtr(ctx), ctx, fp12.getCPtr(gtsig), gtsig);
  }

  public static BLST_ERROR aggregate_in_g1(p1 out, p1 in, SWIGTYPE_p_unsigned_char zwire) {
    return BLST_ERROR.swigToEnum(blstJNI.aggregate_in_g1(p1.getCPtr(out), out, p1.getCPtr(in), in, SWIGTYPE_p_unsigned_char.getCPtr(zwire)));
  }

  public static BLST_ERROR aggregate_in_g2(p2 out, p2 in, SWIGTYPE_p_unsigned_char zwire) {
    return BLST_ERROR.swigToEnum(blstJNI.aggregate_in_g2(p2.getCPtr(out), out, p2.getCPtr(in), in, SWIGTYPE_p_unsigned_char.getCPtr(zwire)));
  }

  public static void aggregated_in_g1(fp12 out, p1_affine signature) {
    blstJNI.aggregated_in_g1(fp12.getCPtr(out), out, p1_affine.getCPtr(signature), signature);
  }

  public static void aggregated_in_g2(fp12 out, p2_affine signature) {
    blstJNI.aggregated_in_g2(fp12.getCPtr(out), out, p2_affine.getCPtr(signature), signature);
  }

  public static BLST_ERROR core_verify_pk_in_g1(p1_affine pk, p2_affine signature, int hash_or_encode, byte[] msg, byte[] DST, byte[] aug) {
    return BLST_ERROR.swigToEnum(blstJNI.core_verify_pk_in_g1(p1_affine.getCPtr(pk), pk, p2_affine.getCPtr(signature), signature, hash_or_encode, msg, DST, aug));
  }

  public static BLST_ERROR core_verify_pk_in_g2(p2_affine pk, p1_affine signature, int hash_or_encode, byte[] msg, byte[] DST, byte[] aug) {
    return BLST_ERROR.swigToEnum(blstJNI.core_verify_pk_in_g2(p2_affine.getCPtr(pk), pk, p1_affine.getCPtr(signature), signature, hash_or_encode, msg, DST, aug));
  }

  public static void setBLS12_381_G1(p1_affine value) {
    blstJNI.BLS12_381_G1_set(p1_affine.getCPtr(value), value);
  }

  public static p1_affine getBLS12_381_G1() {
    long cPtr = blstJNI.BLS12_381_G1_get();
    return (cPtr == 0) ? null : new p1_affine(cPtr, false);
  }

  public static void setBLS12_381_NEG_G1(p1_affine value) {
    blstJNI.BLS12_381_NEG_G1_set(p1_affine.getCPtr(value), value);
  }

  public static p1_affine getBLS12_381_NEG_G1() {
    long cPtr = blstJNI.BLS12_381_NEG_G1_get();
    return (cPtr == 0) ? null : new p1_affine(cPtr, false);
  }

  public static void setBLS12_381_G2(p2_affine value) {
    blstJNI.BLS12_381_G2_set(p2_affine.getCPtr(value), value);
  }

  public static p2_affine getBLS12_381_G2() {
    long cPtr = blstJNI.BLS12_381_G2_get();
    return (cPtr == 0) ? null : new p2_affine(cPtr, false);
  }

  public static void setBLS12_381_NEG_G2(p2_affine value) {
    blstJNI.BLS12_381_NEG_G2_set(p2_affine.getCPtr(value), value);
  }

  public static p2_affine getBLS12_381_NEG_G2() {
    long cPtr = blstJNI.BLS12_381_NEG_G2_get();
    return (cPtr == 0) ? null : new p2_affine(cPtr, false);
  }

  public static int p1_on_curve(p1 p) {
    return blstJNI.p1_on_curve(p1.getCPtr(p), p);
  }

  public static int p2_on_curve(p2 p) {
    return blstJNI.p2_on_curve(p2.getCPtr(p), p);
  }

  public static void p1_from_jacobian(p1 out, p1 in) {
    blstJNI.p1_from_jacobian(p1.getCPtr(out), out, p1.getCPtr(in), in);
  }

  public static void p2_from_jacobian(p2 out, p2 in) {
    blstJNI.p2_from_jacobian(p2.getCPtr(out), out, p2.getCPtr(in), in);
  }

  public static void sk_to_pk2_in_g1(byte[] out, p1_affine out_pk, scalar SK) {
    blstJNI.sk_to_pk2_in_g1(out, p1_affine.getCPtr(out_pk), out_pk, scalar.getCPtr(SK), SK);
  }

  public static void sign_pk2_in_g1(byte[] out, p2_affine out_sig, p2 hash, scalar SK) {
    blstJNI.sign_pk2_in_g1(out, p2_affine.getCPtr(out_sig), out_sig, p2.getCPtr(hash), hash, scalar.getCPtr(SK), SK);
  }

  public static void sk_to_pk2_in_g2(byte[] out, p2_affine out_pk, scalar SK) {
    blstJNI.sk_to_pk2_in_g2(out, p2_affine.getCPtr(out_pk), out_pk, scalar.getCPtr(SK), SK);
  }

  public static void sign_pk2_in_g2(byte[] out, p1_affine out_sig, p1 hash, scalar SK) {
    blstJNI.sign_pk2_in_g2(out, p1_affine.getCPtr(out_sig), out_sig, p1.getCPtr(hash), hash, scalar.getCPtr(SK), SK);
  }

  public static byte[] cdata(SWIGTYPE_p_void ptr, int nelements) {
    return blstJNI.cdata(SWIGTYPE_p_void.getCPtr(ptr), nelements);
  }

  public static void memmove(SWIGTYPE_p_void data, byte[] indata) {
    blstJNI.memmove(SWIGTYPE_p_void.getCPtr(data), indata);
  }

}
