/*
 * Copyright 2019 ConsenSys AG.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 */

package tech.pegasys.artemis.util.hashToG2;

import static com.google.common.base.Preconditions.checkArgument;
import static tech.pegasys.artemis.util.hashToG2.FP2Immutable.ONE;
import static tech.pegasys.artemis.util.hashToG2.Util.fpFromHex;
import static tech.pegasys.artemis.util.hashToG2.Util.negate;
import static tech.pegasys.artemis.util.hashToG2.Util.os2ip_modP;

import java.nio.charset.StandardCharsets;
import org.apache.milagro.amcl.BLS381.FP;
import org.apache.milagro.amcl.BLS381.FP2;
import org.apache.tuweni.bytes.Bytes;
import org.apache.tuweni.crypto.Hash;

public class Helper {

  // These are eighth-roots of unity
  private static final FP RV1 =
      fpFromHex(
          "0x06af0e0437ff400b6831e36d6bd17ffe48395dabc2d3435e77f76e17009241c5ee67992f72ec05f4c81084fbede3cc09");
  static final FP2Immutable[] ROOTS_OF_UNITY = {
    new FP2Immutable(new FP(1), new FP(0)),
    new FP2Immutable(new FP(0), new FP(1)),
    new FP2Immutable(RV1, RV1),
    new FP2Immutable(RV1, negate(RV1))
  };

  // 3-isogenous curve parameters
  private static final FP2Immutable Ell2p_a = new FP2Immutable(new FP(0), new FP(240));
  private static final FP2Immutable Ell2p_b = new FP2Immutable(new FP(1012), new FP(1012));

  // Distinguished non-square in Fp2 for SWU map
  private static final FP2Immutable xi_2 = new FP2Immutable(new FP(1), new FP(1));
  private static final FP2Immutable xi_2Pow2 = xi_2.sqr();
  private static final FP2Immutable xi_2Pow3 = xi_2Pow2.mul(xi_2);

  // Eta values, used for computing sqrt(g(X1(t)))
  private static final FP ev1 =
      fpFromHex(
          "0x02c4a7244a026bd3e305cc456ad9e235ed85f8b53954258ec8186bb3d4eccef7c4ee7b8d4b9e063a6c88d0aa3e03ba01");
  private static final FP ev2 =
      fpFromHex(
          "0x085fa8cd9105715e641892a0f9a4bb2912b58b8d32f26594c60679cc7973076dc6638358daf3514d6426a813ae01f51a");
  private static final FP2Immutable[] etas = {
    new FP2Immutable(ev1, new FP(0)),
    new FP2Immutable(new FP(0), ev1),
    new FP2Immutable(ev2, ev2),
    new FP2Immutable(ev2, negate(ev2))
  };

  // Coefficients for the 3-isogeny map from Ell2' to Ell2
  private static final FP2Immutable[] XNUM = {
    new FP2Immutable(
        "0x05c759507e8e333ebb5b7a9a47d7ed8532c52d39fd3a042a88b58423c50ae15d5c2638e343d9c71c6238aaaaaaaa97d6",
        "0x05c759507e8e333ebb5b7a9a47d7ed8532c52d39fd3a042a88b58423c50ae15d5c2638e343d9c71c6238aaaaaaaa97d6"),
    new FP2Immutable(
        "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "0x11560bf17baa99bc32126fced787c88f984f87adf7ae0c7f9a208c6b4f20a4181472aaa9cb8d555526a9ffffffffc71a"),
    new FP2Immutable(
        "0x11560bf17baa99bc32126fced787c88f984f87adf7ae0c7f9a208c6b4f20a4181472aaa9cb8d555526a9ffffffffc71e",
        "0x08ab05f8bdd54cde190937e76bc3e447cc27c3d6fbd7063fcd104635a790520c0a395554e5c6aaaa9354ffffffffe38d"),
    new FP2Immutable(
        "0x171d6541fa38ccfaed6dea691f5fb614cb14b4e7f4e810aa22d6108f142b85757098e38d0f671c7188e2aaaaaaaa5ed1",
        "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
  };

  private static final FP2Immutable[] XDEN = {
    new FP2Immutable(
        "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa63"),
    new FP2Immutable(
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c",
        "0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa9f"),
    new FP2Immutable(
        "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
  };

  private static final FP2Immutable[] YNUM = {
    new FP2Immutable(
        "0x1530477c7ab4113b59a4c18b076d11930f7da5d4a07f649bf54439d87d27e500fc8c25ebf8c92f6812cfc71c71c6d706",
        "0x1530477c7ab4113b59a4c18b076d11930f7da5d4a07f649bf54439d87d27e500fc8c25ebf8c92f6812cfc71c71c6d706"),
    new FP2Immutable(
        "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "0x05c759507e8e333ebb5b7a9a47d7ed8532c52d39fd3a042a88b58423c50ae15d5c2638e343d9c71c6238aaaaaaaa97be"),
    new FP2Immutable(
        "0x11560bf17baa99bc32126fced787c88f984f87adf7ae0c7f9a208c6b4f20a4181472aaa9cb8d555526a9ffffffffc71c",
        "0x08ab05f8bdd54cde190937e76bc3e447cc27c3d6fbd7063fcd104635a790520c0a395554e5c6aaaa9354ffffffffe38f"),
    new FP2Immutable(
        "0x124c9ad43b6cf79bfbf7043de3811ad0761b0f37a1e26286b0e977c69aa274524e79097a56dc4bd9e1b371c71c718b10",
        "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
  };

  private static final FP2Immutable[] YDEN = {
    new FP2Immutable(
        "0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffa8fb",
        "0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffa8fb"),
    new FP2Immutable(
        "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffa9d3"),
    new FP2Immutable(
        "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012",
        "0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa99"),
    new FP2Immutable(
        "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
  };

  private static final FP2Immutable[][] map_coeffs = {XNUM, XDEN, YNUM, YDEN};

  // Constants for Psi, the untwist-Frobenius-twist endomorphism
  private static final FP iwscBase =
      fpFromHex(
          "0x0d0088f51cbff34d258dd3db21a5d66bb23ba5c279c2895fb39869507b587b120f55ffff58a9ffffdcff7fffffffd556");
  private static final FP iwscBaseM1 =
      fpFromHex(
          "0x0d0088f51cbff34d258dd3db21a5d66bb23ba5c279c2895fb39869507b587b120f55ffff58a9ffffdcff7fffffffd555");
  private static final FP2Immutable iwsc = new FP2Immutable(iwscBase, iwscBaseM1);
  private static final FP k_qi_x =
      fpFromHex(
          "0x1a0111ea397fe699ec02408663d4de85aa0d857d89759ad4897d29650fb85f9b409427eb4f49fffd8bfd00000000aaad");
  private static final FP k_qi_y =
      fpFromHex(
          "0x06af0e0437ff400b6831e36d6bd17ffe48395dabc2d3435e77f76e17009241c5ee67992f72ec05f4c81084fbede3cc09");
  private static final FP2Immutable k_cx = new FP2Immutable(new FP(0), k_qi_x);
  private static final FP2Immutable k_cy =
      new FP2Immutable(
          fpFromHex(
              "0x135203e60180a68ee2e9c448d77a2cd91c3dedd930b1cf60ef396489f61eb45e304466cf3e67fa0af1ee7b04121bdea2"),
          k_qi_y);

  private static final int SHA256_HASH_SIZE = 32;
  private static final int SHA256_BLOCK_SIZE = 64;

  /**
   * Tests whether the given point lies on the BLS12-381 curve.
   *
   * @param p a JacobianPoint
   * @return true if the point is on the curve, false otherwise
   */
  static boolean onCurveG2(JacobianPoint p) {
    if (p.isInfinity()) {
      return true;
    }

    FP2Immutable x = p.getX();
    FP2Immutable y = p.getY();
    FP2Immutable z = p.getZ();

    FP2Immutable y2 = y.sqr();
    FP2Immutable x3 = x.pow(3);
    FP2Immutable z6 = z.pow(6);

    FP2Immutable four = new FP2Immutable(new FP(4), new FP(4));
    return y2.equals(x3.add(z6.mul(four)));
  }

  /**
   * Standard HMAC SHA-256 based on https://tools.ietf.org/html/rfc2104
   *
   * @param text the data to be hashed
   * @param key the key
   * @return Bytes of the HMAC SHA-256 of the text with key
   */
  static Bytes HMAC_SHA256(byte[] text, byte[] key) {

    // SHA256 blocksize in bytes
    int blockSize = SHA256_BLOCK_SIZE;
    byte ipad = (byte) 0x36;
    byte opad = (byte) 0x5c;

    if (key.length > blockSize) {
      key = Hash.sha2_256(key);
    }

    // Pad or truncate the key to the blocksize
    byte[] ikmPadded = new byte[blockSize];
    System.arraycopy(key, 0, ikmPadded, 0, key.length);

    byte[] ikmXorIpad = new byte[blockSize];
    byte[] ikmXorOpad = new byte[blockSize];
    for (int i = 0; i < blockSize; i++) {
      ikmXorIpad[i] = (byte) (ikmPadded[i] ^ ipad);
      ikmXorOpad[i] = (byte) (ikmPadded[i] ^ opad);
    }

    return Hash.sha2_256(
        Bytes.concatenate(
            Bytes.wrap(ikmXorOpad),
            Hash.sha2_256(Bytes.concatenate(Bytes.wrap(ikmXorIpad), Bytes.wrap(text)))));
  }

  /**
   * Standard HKDF_Extract as defined at https://tools.ietf.org/html/rfc5869#section-2.2
   *
   * <p>Note that the arguments to HMAC_SHA-256 appear to be inverted in RFC5869.
   *
   * @param salt salt value (a non-secret random value)
   * @param ikm input keying material
   * @return a pseudorandom key (of HashLen octets)
   */
  static Bytes HKDF_Extract(Bytes salt, Bytes ikm) {
    return HMAC_SHA256(ikm.toArray(), salt.toArray());
  }

  /**
   * Standard HKDF_Expand as defined at https://tools.ietf.org/html/rfc5869#section-2.3
   *
   * @param prk a pseudorandom key of at least HashLen octets
   * @param info optional context and application specific information
   * @param length desired length of output keying material in octets
   * @return output keying material (of `length` octets)
   */
  static Bytes HKDF_Expand(Bytes prk, Bytes info, int length) {
    checkArgument(prk.size() >= SHA256_HASH_SIZE, "prk must be larger than the hash length.");
    checkArgument(
        length > 0 && length <= 255 * SHA256_HASH_SIZE,
        "length must be non-zero and not more than " + 255 * SHA256_HASH_SIZE);
    Bytes okm = Bytes.EMPTY;
    Bytes tOld = Bytes.EMPTY;
    int i = 1;
    int remainder = length;
    while (remainder > 0) {
      Bytes tNew =
          HMAC_SHA256(Bytes.concatenate(tOld, info, Bytes.of((byte) i)).toArray(), prk.toArray());
      okm = Bytes.concatenate(okm, tNew);
      i += 1;
      remainder -= SHA256_HASH_SIZE;
      tOld = tNew;
    }
    return okm.slice(0, length);
  }

  /**
   * Hashes a string msg of any length into an element of the FP2 field.
   *
   * <p>As defined at https://tools.ietf.org/html/draft-irtf-cfrg-hash-to-curve-04#section-5.3
   *
   * @param message the message to hash
   * @param ctr 0, 1, or 2 - used to efficiently create independent instances of hash_to_base
   * @param salt key for the HMAC base hash
   * @return an element in FP2
   */
  static FP2Immutable hashToBase(Bytes message, byte ctr, Bytes salt) {

    final Bytes h2cBytes = Bytes.wrap("H2C".getBytes(StandardCharsets.US_ASCII));
    final Bytes ctrBytes = Bytes.of(ctr);

    Bytes info, t;

    // Do HKDF-Extract
    Bytes m_prime = HKDF_Extract(salt, message);

    // Do first HKDF-Expand
    info = Bytes.concatenate(h2cBytes, ctrBytes, Bytes.of((byte) 1));
    t = HKDF_Expand(m_prime, info, 64);
    FP e1 = os2ip_modP(t);

    // Do second HKDF-Expand
    info = Bytes.concatenate(h2cBytes, ctrBytes, Bytes.of((byte) 2));
    t = HKDF_Expand(m_prime, info, 64);
    FP e2 = os2ip_modP(t);

    return new FP2Immutable(e1, e2);
  }

  /**
   * Calculates a point on the elliptic curve E from an element of the finite field FP2.
   *
   * <p>Curve E here is a curve isogenous to the BLS12-381 curve. Points generated by this function
   * will likely fail the onCurveG2() test.
   *
   * @param t the input field point
   * @return a point on the isogenous curve
   */
  static JacobianPoint mapToCurve(FP2Immutable t) {

    // First, compute X0(t), detecting and handling exceptional case
    FP2Immutable tPow2 = t.sqr();
    FP2Immutable tPow4 = tPow2.sqr();
    FP2Immutable num_den_common = xi_2Pow2.mul(tPow4).add(xi_2.mul(tPow2));
    FP2Immutable x0_num = Ell2p_b.mul(num_den_common.add(ONE));
    FP2Immutable x0_den = Ell2p_a.neg().mul(num_den_common);
    if (x0_den.iszilch()) {
      x0_den = Ell2p_a.mul(xi_2);
    }

    // Compute num and den of g(X0(t))
    FP2Immutable gx0_den = x0_den.pow(3);
    FP2Immutable gx0_num = Ell2p_b.mul(gx0_den);
    gx0_num = gx0_num.add(Ell2p_a.mul(x0_num).mul(x0_den.pow(2)));
    gx0_num = gx0_num.add(x0_num.pow(3));

    // try taking sqrt of g(X0(t))
    // this uses the trick for combining division and sqrt from Section 5 of
    // Bernstein, Duif, Lange, Schwabe, and Yang, "High-speed high-security signatures."
    // J Crypt Eng 2(2):77--89, Sept. 2012. http://ed25519.cr.yp.to/ed25519-20110926.pdf
    FP2Immutable tmp1, tmp2;
    tmp1 = gx0_den.pow(7); // v^7
    tmp2 = gx0_num.mul(tmp1); // u v^7
    tmp1 = tmp1.mul(tmp2).mul(gx0_den); // u v^15
    FP2Immutable sqrt_candidate = tmp2.mul(addChain(tmp1));

    // check if g(X0(t)) is square and return the sqrt if so
    for (FP2Immutable fp2Immutable : ROOTS_OF_UNITY) {
      FP2Immutable y0 = sqrt_candidate.mul(fp2Immutable);
      if (y0.sqr().mul(gx0_den).equals(gx0_num)) {
        // found sqrt(g(X0(t))). force sign of y to equal sign of t
        if (t.sgn0() != y0.sgn0()) {
          y0 = y0.neg();
        }
        return new JacobianPoint(x0_num.mul(x0_den), y0.mul(x0_den.pow(3)), x0_den);
      }
    }

    // if we've gotten here, then g(X0(t)) is not square. convert srqt_candidate to sqrt(g(X1(t)))
    FP2Immutable x1_num = xi_2.mul(tPow2).mul(x0_num);
    FP2Immutable x1_den = x0_den;
    FP2Immutable tPow3 = tPow2.mul(t);
    FP2Immutable tPow6 = tPow3.sqr();
    FP2Immutable gx1_num = xi_2Pow3.mul(tPow6).mul(gx0_num);
    FP2Immutable gx1_den = gx0_den;
    sqrt_candidate = sqrt_candidate.mul(tPow3);
    for (FP2Immutable eta : etas) {
      FP2Immutable y1 = eta.mul(sqrt_candidate);
      if (y1.sqr().mul(gx1_den).equals(gx1_num)) {
        // found sqrt(g(X1(t))). force sign of y to equal sign of t
        if (t.sgn0() != y1.sgn0()) {
          y1 = y1.neg();
        }
        return new JacobianPoint(x1_num.mul(x1_den), y1.mul(x1_den.pow(3)), x1_den);
      }
    }

    // Should never be reached
    throw new RuntimeException("mapToCurve failed for unknown reasons.");
  }

  /**
   * Addition chain for raising to the power of (P ^ 2 - 9) / 16
   *
   * <p>Based on bint2__chains.h in the C reference code. Bos-Coster (win=4) : 895 links, 17
   * variables. This is significantly faster than calculating exponentiation directly.
   *
   * <p>Note that all the overhead from continually wrapping and unwrapping the FP2Immutable types
   * is fully optimised away by the compiler.
   *
   * @param t0 The element to be raised to the power of (P ^ 2 - 9) / 16
   * @return t0 ^ ((P ^ 2 - 9) / 16)
   */
  static FP2Immutable addChain(FP2Immutable t0) {
    FP2Immutable t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16;
    /*    0 : 2 */
    t1 = t0.sqr();
    /*    1 : 3 */
    t2 = t1.mul(t0);
    /*    2 : 5 */
    t15 = t2.mul(t1);
    /*    3 : 7 */
    t3 = t15.mul(t1);
    /*    4 : 9 */
    t14 = t3.mul(t1);
    /*    5 : 11 */
    t13 = t14.mul(t1);
    /*    6 : 13 */
    t5 = t13.mul(t1);
    /*    7 : 15 */
    t10 = t5.mul(t1);
    /*    8 : 17 */
    t9 = t10.mul(t1);
    /*    9 : 19 */
    t16 = t9.mul(t1);
    /*   10 : 21 */
    t4 = t16.mul(t1);
    /*   11 : 23 */
    t7 = t4.mul(t1);
    /*   12 : 25 */
    t6 = t7.mul(t1);
    /*   13 : 27 */
    t12 = t6.mul(t1);
    /*   14 : 29 */
    t8 = t12.mul(t1);
    /*   15 : 31 */
    t11 = t8.mul(t1);
    /*   16 : 42 */
    return t4.sqr()
        /*   17 : 168 */
        .sqrs(2)
        /*   19 : 169 */
        .mul(t0)
        /*   20 : 86528 */
        .sqrs(9)
        /*   29 : 86555 */
        .mul(t12)
        /*   30 : 1384880 */
        .sqrs(4)
        /*   34 : 1384893 */
        .mul(t5)
        /*   35 : 88633152 */
        .sqrs(6)
        /*   41 : 88633161 */
        .mul(t14)
        /*   42 : 1418130576 */
        .sqrs(4)
        /*   46 : 1418130583 */
        .mul(t3)
        /*   47 : 45380178656 */
        .sqrs(5)
        /*   52 : 45380178659 */
        .mul(t2)
        /*   53 : 11617325736704 */
        .sqrs(8)
        /*   61 : 11617325736717 */
        .mul(t5)
        /*   62 : 185877211787472 */
        .sqrs(4)
        /*   66 : 185877211787479 */
        .mul(t3)
        /*   67 : 2974035388599664 */
        .sqrs(4)
        /*   71 : 2974035388599679 */
        .mul(t10)
        /*   72 : 761353059481517824 */
        .sqrs(8)
        /*   80 : 761353059481517853 */
        .mul(t8)
        /*   81 : 48726595806817142592 */
        .sqrs(6)
        /*   87 : 48726595806817142603 */
        .mul(t13)
        /*   88 : 779625532909074281648 */
        .sqrs(4)
        /*   92 : 779625532909074281661 */
        .mul(t5)
        /*   93 : 6237004263272594253288 */
        .sqrs(3)
        /*   96 : 6237004263272594253289 */
        .mul(t0)
        /*   97 : 399168272849446032210496 */
        .sqrs(6)
        /*  103 : 399168272849446032210511 */
        .mul(t10)
        /*  104 : 102187077849458184245890816 */
        .sqrs(8)
        /*  112 : 102187077849458184245890845 */
        .mul(t8)
        /*  113 : 6539972982365323791737014080 */
        .sqrs(6)
        /*  119 : 6539972982365323791737014101 */
        .mul(t4)
        /*  120 : 1674233083485522890684675609856 */
        .sqrs(8)
        /*  128 : 1674233083485522890684675609873 */
        .mul(t9)
        /*  129 : 53575458671536732501909619515936 */
        .sqrs(5)
        /*  134 : 53575458671536732501909619515951 */
        .mul(t10)
        /*  135 : 3428829354978350880122215649020864 */
        .sqrs(6)
        /*  141 : 3428829354978350880122215649020873 */
        .mul(t14)
        /*  142 : 109722539359307228163910900768667936 */
        .sqrs(5)
        /*  147 : 109722539359307228163910900768667951 */
        .mul(t10)
        /*  148 : 438890157437228912655643603074671804 */
        .sqrs(2)
        /*  150 : 438890157437228912655643603074671805 */
        .mul(t0)
        /*  151 : 28088970075982650409961190596778995520 */
        .sqrs(6)
        /*  157 : 28088970075982650409961190596778995535 */
        .mul(t10)
        /*  158 : 3595388169725779252475032396387711428480 */
        .sqrs(7)
        /*  165 : 3595388169725779252475032396387711428491 */
        .mul(t13)
        /*  166 : 57526210715612468039600518342203382855856 */
        .sqrs(4)
        /*  170 : 57526210715612468039600518342203382855863 */
        .mul(t3)
        /*  171 : 3681677485799197954534433173901016502775232 */
        .sqrs(6)
        /*  177 : 3681677485799197954534433173901016502775241 */
        .mul(t14)
        /*  178 : 471254718182297338180407446259330112355230848 */
        .sqrs(7)
        /*  185 : 471254718182297338180407446259330112355230855 */
        .mul(t3)
        /*  186 : 15080150981833514821773038280298563595367387360 */
        .sqrs(5)
        /*  191 : 15080150981833514821773038280298563595367387365 */
        .mul(t15)
        /*  192 : 1930259325674689897186948899878216140207025582720 */
        .sqrs(7)
        /*  199 : 1930259325674689897186948899878216140207025582727 */
        .mul(t3)
        /*  200 : 61768298421590076709982364796102916486624818647264 */
        .sqrs(5)
        /*  205 : 61768298421590076709982364796102916486624818647271 */
        .mul(t3)
        /*  206 : 63250737583708238551021941551209386482303814294805504 */
        .sqrs(10)
        /*  216 : 63250737583708238551021941551209386482303814294805521 */
        .mul(t9)
        /*  217 : 506005900669665908408175532409675091858430514358444168 */
        .sqrs(3)
        /*  220 : 506005900669665908408175532409675091858430514358444173 */
        .mul(t15)
        /*  221 : 16192188821429309069061617037109602939469776459470213536 */
        .sqrs(5)
        /*  226 : 16192188821429309069061617037109602939469776459470213549 */
        .mul(t5)
        /*  227 : 4145200338285903121679773961500058352504262773624374668544 */
        .sqrs(8)
        /*  235 : 4145200338285903121679773961500058352504262773624374668569 */
        .mul(t6)
        /*  236 : 132646410825148899893752766768001867280136408755979989394208 */
        .sqrs(5)
        /*  241 : 132646410825148899893752766768001867280136408755979989394231 */
        .mul(t7)
        /*  242 : 8489370292809529593200177073152119505928730160382719321230784 */
        .sqrs(6)
        /*  248 : 8489370292809529593200177073152119505928730160382719321230795 */
        .mul(t13)
        /*  249 : 543319698739809893964811332681735648379438730264494036558770880 */
        .sqrs(6)
        /*  255 : 543319698739809893964811332681735648379438730264494036558770895 */
        .mul(t10)
        /*  256 : 34772460719347833213747925291631081496284078736927618339761337280 */
        .sqrs(6)
        /*  262 : 34772460719347833213747925291631081496284078736927618339761337289 */
        .mul(t14)
        /*  263 : 4450874972076522651359734437328778431524362078326735147489451172992 */
        .sqrs(7)
        /*  270 : 4450874972076522651359734437328778431524362078326735147489451173011 */
        .mul(t16)
        /*  271 : 142427999106448724843511501994520909808779586506455524719662437536352 */
        .sqrs(5)
        /*  276 : 142427999106448724843511501994520909808779586506455524719662437536361 */
        .mul(t14)
        /*  277 : 9115391942812718389984736127649338227761893536413153582058396002327104 */
        .sqrs(6)
        /*  283 : 9115391942812718389984736127649338227761893536413153582058396002327119 */
        .mul(t10)
        /*  284 : 583385084340013976959023112169557646576761186330441829251737344148935616 */
        .sqrs(6)
        /*  290 : 583385084340013976959023112169557646576761186330441829251737344148935633 */
        .mul(t9)
        /*  291 : 18668322698880447262688739589425844690456357962574138536055595012765940256 */
        .sqrs(5)
        /*  296 : 18668322698880447262688739589425844690456357962574138536055595012765940271 */
        .mul(t10)
        /*  297 : 74673290795521789050754958357703378761825431850296554144222380051063761084 */
        .sqrs(2)
        /*  299 : 74673290795521789050754958357703378761825431850296554144222380051063761085 */
        .mul(t0)
        /*  300 : 19116362443653577996993269339572064963027310553675917860920929293072322837760 */
        .sqrs(8)
        /*  308 : 19116362443653577996993269339572064963027310553675917860920929293072322837765 */
        .mul(t15)
        /*  309 : 2446894392787657983615138475465224315267495750870517486197878949513257323233920 */
        .sqrs(7)
        /*  316 : 2446894392787657983615138475465224315267495750870517486197878949513257323233925 */
        .mul(t15)
        /*  317 : 39150310284602527737842215607443589044279932013928279779166063192212117171742800 */
        .sqrs(4)
        /*  321 : 39150310284602527737842215607443589044279932013928279779166063192212117171742803 */
        .mul(t2)
        /*  322 : 5011239716429123550443803597752779397667831297782819811733256088603150997983078784 */
        .sqrs(7)
        /*  329 : 5011239716429123550443803597752779397667831297782819811733256088603150997983078795 */
        .mul(t13)
        /*  330 : 320719341851463907228403430256177881450741203058100467950928389670601663870917042880 */
        .sqrs(6)
        /*  336 : 320719341851463907228403430256177881450741203058100467950928389670601663870917042895 */
        .mul(t10)
        /*  337 : 5131509469623422515654454884098846103211859248929607487214854234729626621934672686320 */
        .sqrs(4)
        /*  341 : 5131509469623422515654454884098846103211859248929607487214854234729626621934672686333 */
        .mul(t5)
        /*  342 : 656833212111798082003770225164652301211117983862989758363501342045392207607638103850624 */
        .sqrs(7)
        /*  349 : 656833212111798082003770225164652301211117983862989758363501342045392207607638103850635 */
        .mul(t13)
        /*  350 : 42037325575155077248241294410537747277511550967231344535264085890905101286888838646440640 */
        .sqrs(6)
        /*  356 : 42037325575155077248241294410537747277511550967231344535264085890905101286888838646440667 */
        .mul(t12)
        /*  357 : 1345194418404962471943721421137207912880369630951403025128450748508963241180442836686101344 */
        .sqrs(5)
        /*  362 : 1345194418404962471943721421137207912880369630951403025128450748508963241180442836686101367 */
        .mul(t7)
        /*  363 : 43046221388958799102199085476390653212171828190444896804110423952286823717774170773955243744 */
        .sqrs(5)
        /*  368 : 43046221388958799102199085476390653212171828190444896804110423952286823717774170773955243749 */
        .mul(t15)
        /*  369 : 5509916337786726285081482940978003611157994008376946790926134265892713435875093859066271199872 */
        .sqrs(7)
        /*  376 : 5509916337786726285081482940978003611157994008376946790926134265892713435875093859066271199899 */
        .mul(t12)
        /*  377 : 176317322809175241122607454111296115557055808268062297309636296508566829948003003490120678396768 */
        .sqrs(5)
        /*  382 : 176317322809175241122607454111296115557055808268062297309636296508566829948003003490120678396791 */
        .mul(t7)
        /*  383 : 5642154329893607715923438531561475697825785864577993513908361488274138558336096111683861708697312 */
        .sqrs(5)
        /*  388 : 5642154329893607715923438531561475697825785864577993513908361488274138558336096111683861708697333 */
        .mul(t4)
        /*  389 : 90274469278297723454775016504983611165212573833247896222533783812386216933377537786941787339157328 */
        .sqrs(4)
        /*  393 : 90274469278297723454775016504983611165212573833247896222533783812386216933377537786941787339157331 */
        .mul(t2)
        /*  394 : 5777566033811054301105601056318951114573604725327865358242162163992717883736162418364274389706069184 */
        .sqrs(6)
        /*  400 : 5777566033811054301105601056318951114573604725327865358242162163992717883736162418364274389706069189 */
        .mul(t15)
        /*  401 : 369764226163907475270758467604412871332710702420983382927498378495533944559114394775313560941188428096 */
        .sqrs(6)
        /*  407 : 369764226163907475270758467604412871332710702420983382927498378495533944559114394775313560941188428105 */
        .mul(t14)
        /*  408 : 5916227618622519604332135481670605941323371238735734126839974055928543112945830316405016975059014849680 */
        .sqrs(4)
        /*  412 : 5916227618622519604332135481670605941323371238735734126839974055928543112945830316405016975059014849683 */
        .mul(t2)
        /*  413 : 94659641897960313669314167706729695061173939819771746029439584894856689807133285062480271600944237594928 */
        .sqrs(4)
        /*  417 : 94659641897960313669314167706729695061173939819771746029439584894856689807133285062480271600944237594931 */
        .mul(t2)
        /*  418 : 24232868325877840299344426932922801935660528593861566983536533733083312590626120975994949529841724824302336 */
        .sqrs(8)
        /*  426 : 24232868325877840299344426932922801935660528593861566983536533733083312590626120975994949529841724824302345 */
        .mul(t14)
        /*  427 : 775451786428090889579021661853529661941136915003570143473169079458666002900035871231838384954935194377675040 */
        .sqrs(5)
        /*  432 : 775451786428090889579021661853529661941136915003570143473169079458666002900035871231838384954935194377675055 */
        .mul(t10)
        /*  433 : 49628914331397816933057386358625898364232762560228489182282821085354624185602295758837656637115852440171203520 */
        .sqrs(6)
        /*  439 : 49628914331397816933057386358625898364232762560228489182282821085354624185602295758837656637115852440171203527 */
        .mul(t3)
        /*  440 : 1588125258604730141857836363476028747655448401927311653833050274731347973939273464282805012387707278085478512864 */
        .sqrs(5)
        /*  445 : 1588125258604730141857836363476028747655448401927311653833050274731347973939273464282805012387707278085478512879 */
        .mul(t10)
        /*  446 : 6504961059244974661049697744797813750396716654294268534100173925299601301255264109702369330740049011038119988752384 */
        .sqrs(12)
        /*  458 : 6504961059244974661049697744797813750396716654294268534100173925299601301255264109702369330740049011038119988752401 */
        .mul(t9)
        /*  459 : 104079376947919594576795163916765020006347466468708296545602782804793620820084225755237909291840784176609919820038416 */
        .sqrs(4)
        /*  463 : 104079376947919594576795163916765020006347466468708296545602782804793620820084225755237909291840784176609919820038429 */
        .mul(t5)
        /*  464 : 3330540062333427026457445245336480640203118926998665489459289049753395866242695224167613097338905093651517434241229728 */
        .sqrs(5)
        /*  469 : 3330540062333427026457445245336480640203118926998665489459289049753395866242695224167613097338905093651517434241229741 */
        .mul(t5)
        /*  470 : 213154563989339329693276495701534760972999611327914591325394499184217335439532494346727238229689925993697115791438703424 */
        .sqrs(6)
        /*  476 : 213154563989339329693276495701534760972999611327914591325394499184217335439532494346727238229689925993697115791438703427 */
        .mul(t2)
        /*  477 : 109135136762541736802957565799185797618175800999892270758601983582319275745040637105524345973601242108772923285216616154624 */
        .sqrs(9)
        /*  486 : 109135136762541736802957565799185797618175800999892270758601983582319275745040637105524345973601242108772923285216616154649 */
        .mul(t6)
        /*  487 : 3492324376401335577694642105573945523781625631996552664275263474634216823841300387376779071155239747480733545126931716948768 */
        .sqrs(5)
        /*  492 : 3492324376401335577694642105573945523781625631996552664275263474634216823841300387376779071155239747480733545126931716948793 */
        .mul(t6)
        /*  493 : 223508760089685476972457094756732513522024040447779370513616862376589876725843224792113860553935343838766946888123629884722752 */
        .sqrs(6)
        /*  499 : 223508760089685476972457094756732513522024040447779370513616862376589876725843224792113860553935343838766946888123629884722755 */
        .mul(t2)
        /*  500 : 14304560645739870526237254064430880865409538588657879712871479192101752110453966386695287075451862005681084600839912312622256320 */
        .sqrs(6)
        /*  506 : 14304560645739870526237254064430880865409538588657879712871479192101752110453966386695287075451862005681084600839912312622256323 */
        .mul(t2)
        /*  507 : 7323935050618813709433474080988611003089683757392834412990197346356097080552430789987986982631353346908715315630035104062595237376 */
        .sqrs(9)
        /*  516 : 7323935050618813709433474080988611003089683757392834412990197346356097080552430789987986982631353346908715315630035104062595237399 */
        .mul(t7)
        /*  517 : 937463686479208154807484682366542208395479520946282804862745260333580426310711141118462333776813228404315560400644493320012190387072 */
        .sqrs(7)
        /*  524 : 937463686479208154807484682366542208395479520946282804862745260333580426310711141118462333776813228404315560400644493320012190387087 */
        .mul(t10)
        /*  525 : 59997675934669321907679019671458701337310689340562099511215696661349147283885513031581589361716046617876195865641247572480780184773568 */
        .sqrs(6)
        /*  531 : 59997675934669321907679019671458701337310689340562099511215696661349147283885513031581589361716046617876195865641247572480780184773593 */
        .mul(t6)
        /*  532 : 1919925629909418301045728629486678442793942058897987184358902293163172713084336417010610859574913491772038267700519922319384965912754976 */
        .sqrs(5)
        /*  537 : 1919925629909418301045728629486678442793942058897987184358902293163172713084336417010610859574913491772038267700519922319384965912754985 */
        .mul(t14)
        /*  538 : 245750480628405542533853264574294840677624583538942359597939493524886107274795061377358190025588926946820898265666550056881275636832638080 */
        .sqrs(7)
        /*  545 : 245750480628405542533853264574294840677624583538942359597939493524886107274795061377358190025588926946820898265666550056881275636832638103 */
        .mul(t7)
        /*  546 : 983001922513622170135413058297179362710498334155769438391757974099544429099180245509432760102355707787283593062666200227525102547330552412 */
        .sqrs(2)
        /*  548 : 983001922513622170135413058297179362710498334155769438391757974099544429099180245509432760102355707787283593062666200227525102547330552413 */
        .mul(t0)
        /*  549 : 251648492163487275554665742924077916853887573543876976228290041369483373849390142850414786586203061193544599824042547258246426252116621417728 */
        .sqrs(8)
        /*  557 : 251648492163487275554665742924077916853887573543876976228290041369483373849390142850414786586203061193544599824042547258246426252116621417739 */
        .mul(t13)
        /*  558 : 4026375874615796408874651886785246669662201176702031619652640661911733981590242285606636585379248979096713597184680756131942820033865942683824 */
        .sqrs(4)
        /*  562 : 4026375874615796408874651886785246669662201176702031619652640661911733981590242285606636585379248979096713597184680756131942820033865942683829 */
        .mul(t15)
        /*  563 : 515376111950821940335955441508511573716761750617860047315538004724701949643551012557649482928543869324379340439639136784888680964334840663530112 */
        .sqrs(7)
        /*  570 : 515376111950821940335955441508511573716761750617860047315538004724701949643551012557649482928543869324379340439639136784888680964334840663530119 */
        .mul(t3)
        /*  571 : 131936284659410416726004593026178962871491008158172172112777729209523699108749059214758267629707230547041111152547619016931502326869719209863710464 */
        .sqrs(8)
        /*  579 : 131936284659410416726004593026178962871491008158172172112777729209523699108749059214758267629707230547041111152547619016931502326869719209863710473 */
        .mul(t14)
        /*  580 : 16887844436404533340928587907350907247550849044246038030435549338819033485919879579489058256602525510021262227526095234167232297839324058862554940544 */
        .sqrs(7)
        /*  587 : 16887844436404533340928587907350907247550849044246038030435549338819033485919879579489058256602525510021262227526095234167232297839324058862554940557 */
        .mul(t5)
        /*  588 : 17293152702878242141110874017127329021492069421307942943166002522950690289581956689396795654760986122261772520986721519787245872987467836275256259130368 */
        .sqrs(10)
        /*  598 : 17293152702878242141110874017127329021492069421307942943166002522950690289581956689396795654760986122261772520986721519787245872987467836275256259130377 */
        .mul(t14)
        /*  599 : 1106761772984207497031095937096149057375492442963708348362624161468844178533245228121394921904703111824753441343150177266383735871197941521616400584344128 */
        .sqrs(6)
        /*  605 : 1106761772984207497031095937096149057375492442963708348362624161468844178533245228121394921904703111824753441343150177266383735871197941521616400584344139 */
        .mul(t13)
        /*  606 : 70832753470989279809990139974153539672031516349677334295207946334006027426127694599769275001900999156784220245961611345048559095756668257383449637398024896 */
        .sqrs(6)
        /*  612 : 70832753470989279809990139974153539672031516349677334295207946334006027426127694599769275001900999156784220245961611345048559095756668257383449637398024909 */
        .mul(t5)
        /*  613 : 4533296222143313907839368958345826539010017046379349394893308565376385755272172454385233600121663946034190095741543126083107782128426768472540776793473594176 */
        .sqrs(6)
        /*  619 : 4533296222143313907839368958345826539010017046379349394893308565376385755272172454385233600121663946034190095741543126083107782128426768472540776793473594207 */
        .mul(t11)
        /*  620 : 145065479108586045050859806667066449248320545484139180636585874092044344168709518540327475203893246273094083063729380034659449028109656591121304857391155014624 */
        .sqrs(5)
        /*  625 : 145065479108586045050859806667066449248320545484139180636585874092044344168709518540327475203893246273094083063729380034659449028109656591121304857391155014649 */
        .mul(t6)
        /*  626 : 18568381325899013766510055253384505503785029821969815121482991883781676053594818373161916826098335522956042632157360644436409475598036043663527021746067841875072 */
        .sqrs(7)
        /*  633 : 18568381325899013766510055253384505503785029821969815121482991883781676053594818373161916826098335522956042632157360644436409475598036043663527021746067841875087 */
        .mul(t10)
        /*  634 : 594188202428768440528321768108304176121120954303034083887455740281013633715034187941181338435146736734593364229035540621965103219137153397232864695874170940002784 */
        .sqrs(5)
        /*  639 : 594188202428768440528321768108304176121120954303034083887455740281013633715034187941181338435146736734593364229035540621965103219137153397232864695874170940002797 */
        .mul(t5)
        /*  640 : 76056089910882360387625186317862934543503482150788362737594334755969745115524376056471211319698782302027950621316549199611533212049555634845806681071893880320358016 */
        .sqrs(7)
        /*  647 : 76056089910882360387625186317862934543503482150788362737594334755969745115524376056471211319698782302027950621316549199611533212049555634845806681071893880320358047 */
        .mul(t11)
        /*  648 : 2433794877148235532404005962171613905392111428825227607603018712191031843696780033807078762230361033664894419882129574387569062785585780315065813794300604170251457504 */
        .sqrs(5)
        /*  653 : 2433794877148235532404005962171613905392111428825227607603018712191031843696780033807078762230361033664894419882129574387569062785585780315065813794300604170251457511 */
        .mul(t3)
        /*  654 : 623051488549948296295425526315933159780380525779258267546372790320904151986375688654612163130972424618212971489825171043217680073109959760656848331340954667584373122816 */
        .sqrs(8)
        /*  662 : 623051488549948296295425526315933159780380525779258267546372790320904151986375688654612163130972424618212971489825171043217680073109959760656848331340954667584373122843 */
        .mul(t12)
        /*  663 : 39875295267196690962907233684219722225944353649872529122967858580537865727128044073895178440382235175565630175348810946765931524679037424682038293205821098725399879861952 */
        .sqrs(6)
        /*  669 : 39875295267196690962907233684219722225944353649872529122967858580537865727128044073895178440382235175565630175348810946765931524679037424682038293205821098725399879861981 */
        .mul(t8)
        /*  670 : 2552018897100588221626062955790062222460438633591841863869942949154423406536194820729291420184463051236200331222323900593019617579458395179650450765172550318425592311166784 */
        .sqrs(6)
        /*  676 : 2552018897100588221626062955790062222460438633591841863869942949154423406536194820729291420184463051236200331222323900593019617579458395179650450765172550318425592311166787 */
        .mul(t2)
        /*  677 : 326658418828875292368136058341127964474936145099755758575352697491766196036632937053349301783611270558233642396457459275906511050170674582995257697942086440758475815829348736 */
        .sqrs(7)
        /*  684 : 326658418828875292368136058341127964474936145099755758575352697491766196036632937053349301783611270558233642396457459275906511050170674582995257697942086440758475815829348747 */
        .mul(t13)
        /*  685 : 41812277610096037423121415467664379452791826572768737097645145278946073092689015942828710628302242631453906226746554787316033414421846346623392985336587064417084904426156639616 */
        .sqrs(7)
        /*  692 : 41812277610096037423121415467664379452791826572768737097645145278946073092689015942828710628302242631453906226746554787316033414421846346623392985336587064417084904426156639627 */
        .mul(t13)
        /*  693 : 2675985767046146395079770589930520284978676900657199174249289297852548677932097020341037480211343528413049998511779506388226138522998166183897151061541572122693433883274024936128 */
        .sqrs(6)
        /*  699 : 2675985767046146395079770589930520284978676900657199174249289297852548677932097020341037480211343528413049998511779506388226138522998166183897151061541572122693433883274024936131 */
        .mul(t2)
        /*  700 : 85631544545476684642552658877776649119317660821030373575977257531281557693827104650913199366762992909217599952376944204423236432735941317884708833969330307926189884264768797956192 */
        .sqrs(5)
        /*  705 : 85631544545476684642552658877776649119317660821030373575977257531281557693827104650913199366762992909217599952376944204423236432735941317884708833969330307926189884264768797956199 */
        .mul(t3)
        /*  706 : 87686701614568125073973922690843288698181284680735102541800711712032315078478955162535116151565304739038822351233990865329394107121603909513941845984594235316418441487123249107147776 */
        .sqrs(10)
        /*  716 : 87686701614568125073973922690843288698181284680735102541800711712032315078478955162535116151565304739038822351233990865329394107121603909513941845984594235316418441487123249107147803 */
        .mul(t12)
        /*  717 : 1402987225833090001183582763053492619170900554891761640668811387392517041255663282600561858425044875824621157619743853845270305713945662552223069535753507765062695063793971985714364848 */
        .sqrs(4)
        /*  721 : 1402987225833090001183582763053492619170900554891761640668811387392517041255663282600561858425044875824621157619743853845270305713945662552223069535753507765062695063793971985714364849 */
        .mul(t0)
        /*  722 : 718329459626542080605994374683388221015501084104581960022431430344968725122899600691487671513622976422206032701308853168778396525540179226738211602305795975712099872662513656685754802688 */
        .sqrs(9)
        /*  731 : 718329459626542080605994374683388221015501084104581960022431430344968725122899600691487671513622976422206032701308853168778396525540179226738211602305795975712099872662513656685754802705 */
        .mul(t9)
        /*  732 : 45973085416098693158783639979736846144992069382693245441435611542077998407865574444255210976871870491021186092883766602801817377634571470511245542547570942445574391850400874027888307373120 */
        .sqrs(6)
        /*  738 : 45973085416098693158783639979736846144992069382693245441435611542077998407865574444255210976871870491021186092883766602801817377634571470511245542547570942445574391850400874027888307373135 */
        .mul(t10)
        /*  739 : 5884554933260632724324305917406316306558984880984735416503758277385983796206793528864667005039599422850711819889122125158632624337225148225439429446089080633033522156851311875569703343761280 */
        .sqrs(7)
        /*  746 : 5884554933260632724324305917406316306558984880984735416503758277385983796206793528864667005039599422850711819889122125158632624337225148225439429446089080633033522156851311875569703343761311 */
        .mul(t11)
        /*  747 : 188305757864340247178377789357002121809887516191511533328120264876351481478617392923669344161267181531222778236451908005076243978791204743214061742274850580257072709019241980018230507000361952 */
        .sqrs(5)
        /*  752 : 188305757864340247178377789357002121809887516191511533328120264876351481478617392923669344161267181531222778236451908005076243978791204743214061742274850580257072709019241980018230507000361973 */
        .mul(t4)
        /*  753 : 3012892125829443954854044629712033948958200259064184533249924238021623703657878286778709506580274904499564451783230528081219903660659275891424987876397609284113163344307871680291688112005791568 */
        .sqrs(4)
        /*  757 : 3012892125829443954854044629712033948958200259064184533249924238021623703657878286778709506580274904499564451783230528081219903660659275891424987876397609284113163344307871680291688112005791583 */
        .mul(t10)
        /*  758 : 385650192106168826221317712603140345466649633160215620255990302466767834068208420707674816842275187775944249828253507594396147668564387314102398448178893988366484908071407575077336078336741322624 */
        .sqrs(7)
        /*  765 : 385650192106168826221317712603140345466649633160215620255990302466767834068208420707674816842275187775944249828253507594396147668564387314102398448178893988366484908071407575077336078336741322653 */
        .mul(t8)
        /*  766 : 12340806147397402439082166803300491054932788261126899848191689678936570690182669462645594138952806008830215994504112243020676725394060394051276750341724607627727517058285042402474754506775722324896 */
        .sqrs(5)
        /*  771 : 12340806147397402439082166803300491054932788261126899848191689678936570690182669462645594138952806008830215994504112243020676725394060394051276750341724607627727517058285042402474754506775722324917 */
        .mul(t4)
        /*  772 : 394905796716716878050629337705615713757849224356060795142134069725970262085845422804659012446489792282566911824131591776661655212609932609640856010935187444087280545865121356879192144216823114397344 */
        .sqrs(5)
        /*  777 : 394905796716716878050629337705615713757849224356060795142134069725970262085845422804659012446489792282566911824131591776661655212609932609640856010935187444087280545865121356879192144216823114397365 */
        .mul(t4)
        /*  778 : 12636985494934940097620138806579702840251175179393945444548290231231048386747053529749088398287673353042141178372210936853172966803517843508507392349925998210792977467683883420134148614938339660715680 */
        .sqrs(5)
        /*  783 : 12636985494934940097620138806579702840251175179393945444548290231231048386747053529749088398287673353042141178372210936853172966803517843508507392349925998210792977467683883420134148614938339660715697 */
        .mul(t9)
        /*  784 : 202191767918959041561922220905275245444018802870303127112772643699696774187952856475985414372602773648674258853955374989650767468856285496136118277598815971372687639482942134722146377839013434571451152 */
        .sqrs(4)
        /*  788 : 202191767918959041561922220905275245444018802870303127112772643699696774187952856475985414372602773648674258853955374989650767468856285496136118277598815971372687639482942134722146377839013434571451165 */
        .mul(t5)
        /*  789 : 12940273146813378659963022137937615708417203383699400135217449196780593548028982814463066519846577513515152566653143999337649118006802271752711569766324222167852008926908296622217368181696859812572874560 */
        .sqrs(6)
        /*  795 : 12940273146813378659963022137937615708417203383699400135217449196780593548028982814463066519846577513515152566653143999337649118006802271752711569766324222167852008926908296622217368181696859812572874589 */
        .mul(t8)
        /*  796 : 25880546293626757319926044275875231416834406767398800270434898393561187096057965628926133039693155027030305133306287998675298236013604543505423139532648444335704017853816593244434736363393719625145749178 */
        .sqr()
        /*  797 : 25880546293626757319926044275875231416834406767398800270434898393561187096057965628926133039693155027030305133306287998675298236013604543505423139532648444335704017853816593244434736363393719625145749179 */
        .mul(t0)
        /*  798 : 1656354962792112468475266833656014810677402033113523217307833497187915974147709800251272514540361921729939528531602431915219087104870690784347080930089500437485057142644261967643823127257198056009327947456 */
        .sqrs(6)
        /*  804 : 1656354962792112468475266833656014810677402033113523217307833497187915974147709800251272514540361921729939528531602431915219087104870690784347080930089500437485057142644261967643823127257198056009327947463 */
        .mul(t3)
        /*  805 : 1696107481899123167718673237663759166133659681908247774523221501120425957527254835457303054889330607851458077216360890281184345195387587363171410872411648447984698514067724254867274882311370809353551818202112 */
        .sqrs(10)
        /*  815 : 1696107481899123167718673237663759166133659681908247774523221501120425957527254835457303054889330607851458077216360890281184345195387587363171410872411648447984698514067724254867274882311370809353551818202135 */
        .mul(t7)
        /*  816 : 108550878841543882733995087210480586632554219642127857569486176071707261281744309469267395512917158902493316941847096977995798092504805591242970295834345500671020704900334352311505592467927731798627316364936640 */
        .sqrs(6)
        /*  822 : 108550878841543882733995087210480586632554219642127857569486176071707261281744309469267395512917158902493316941847096977995798092504805591242970295834345500671020704900334352311505592467927731798627316364936661 */
        .mul(t4)
        /*  823 : 6947256245858808494975685581470757544483470057096182884447115268589264722031635806033113312826698169759572284278214206591731077920307557839550098933398112042945325113621398547936357917947374835112148247355946304 */
        .sqrs(6)
        /*  829 : 6947256245858808494975685581470757544483470057096182884447115268589264722031635806033113312826698169759572284278214206591731077920307557839550098933398112042945325113621398547936357917947374835112148247355946329 */
        .mul(t6)
        /*  830 : 444624399734963743678443877214128482846942083654155704604615377189712942210024691586119252020908682864612626193805709221870788986899683701731206331737479170748500807271769507067926906748631989447177487830780565056 */
        .sqrs(6)
        /*  836 : 444624399734963743678443877214128482846942083654155704604615377189712942210024691586119252020908682864612626193805709221870788986899683701731206331737479170748500807271769507067926906748631989447177487830780565069 */
        .mul(t5)
        /*  837 : 28455961583037679595420408141704222902204293353865965094695384140141628301441580261511632129338155703335208076403565390199730495161579756910797205231198666927904051665393248452347322031912447324619359221169956164416 */
        .sqrs(6)
        /*  843 : 28455961583037679595420408141704222902204293353865965094695384140141628301441580261511632129338155703335208076403565390199730495161579756910797205231198666927904051665393248452347322031912447324619359221169956164437 */
        .mul(t4)
        /*  844 : 238705906983162543355580399100765177871214152862586865721082456961065184302499251714358569373223087638243353151383559860752580829556389241459968722180074986980751351032731127113348364375477010926880553717580063640645533696 */
        .sqrs(23)
        /*  867 : 238705906983162543355580399100765177871214152862586865721082456961065184302499251714358569373223087638243353151383559860752580829556389241459968722180074986980751351032731127113348364375477010926880553717580063640645533703 */
        .mul(t3)
        /*  868 : 15277178046922402774757145542448971383757705783205559406149277245508171795359952109718948439886277608847574601688547831088165173091608911453437998219524799166768086466094792135254295320030528699320355437925124073001314156992 */
        .sqrs(6)
        /*  874 : 15277178046922402774757145542448971383757705783205559406149277245508171795359952109718948439886277608847574601688547831088165173091608911453437998219524799166768086466094792135254295320030528699320355437925124073001314156999 */
        .mul(t3)
        /*  875 : 488869697501516888792228657358367084280246585062577900996776871856261497451518467511006350076360883483122387254033530594821285538931485166510015943024793573336578766915033348328137450240976918378251374013603970336042053023968 */
        .sqrs(5)
        /*  880 : 488869697501516888792228657358367084280246585062577900996776871856261497451518467511006350076360883483122387254033530594821285538931485166510015943024793573336578766915033348328137450240976918378251374013603970336042053023971 */
        .mul(t2)
        /*  881 : 31287660640097080882702634070935493393935781444004985663793719798800735836897181920704406404887096542919832784258145958068562274491615050656641020353586788693541041082562134293000796815422522776208087936870654101506691393534144 */
        .sqrs(6)
        /*  887 : 31287660640097080882702634070935493393935781444004985663793719798800735836897181920704406404887096542919832784258145958068562274491615050656641020353586788693541041082562134293000796815422522776208087936870654101506691393534151 */
        .mul(t3)
        /*  888 : 1001205140483106588246484290269935788605945006208159541241399033561623546780709821462541004956387089373434649096260670658193992783731681621012512651314777238193313314641988297376025498093520728838658813979860931248214124593092832 */
        .sqrs(5)
        /*  893 : 1001205140483106588246484290269935788605945006208159541241399033561623546780709821462541004956387089373434649096260670658193992783731681621012512651314777238193313314641988297376025498093520728838658813979860931248214124593092835 */
        .mul(t2);
  }

  /**
   * Transforms a point on the isogenous curve onto a point on the BLS12-381 curve.
   *
   * <p>This function evaluates the isogeny over Jacobian projective coordinates. For details, see
   * Section 4.3 of Wahby and Boneh, "Fast and simple constant-time hashing to the BLS12-381
   * elliptic curve ePrint # 2019/403, https://ia.cr/2019/403.
   *
   * @param p input point on isogenous curve
   * @return output point on BLS12-381
   */
  static JacobianPoint iso3(JacobianPoint p) {

    FP2Immutable x = new FP2Immutable(p.getX());
    FP2Immutable y = new FP2Immutable(p.getY());
    FP2Immutable z = new FP2Immutable(p.getZ());
    FP2Immutable[] mapvals = new FP2Immutable[4];

    // precompute the required powers of Z^2
    FP2Immutable[] zpows = new FP2Immutable[4];
    zpows[0] = ONE;
    zpows[1] = z.sqr();
    zpows[2] = zpows[1].mul(zpows[1]);
    zpows[3] = zpows[2].mul(zpows[1]);

    // compute the numerator and denominator of the X and Y maps via Horner's rule
    FP2Immutable[] coeffs_z = new FP2Immutable[4];
    for (int idx = 0; idx < map_coeffs.length; idx++) {
      FP2Immutable[] coeffs = map_coeffs[idx];
      for (int j = 0; j < coeffs.length; j++) {
        coeffs_z[j] = coeffs[coeffs.length - j - 1].mul(zpows[j]);
      }
      FP2Immutable tmp = coeffs_z[0];
      for (int j = 1; j < coeffs.length; j++) {
        tmp = tmp.mul(x);
        tmp = tmp.add(coeffs_z[j]);
      }
      mapvals[idx] = tmp;
    }

    // xden is of order 1 less than xnum, so need to multiply it by an extra factor of Z^2
    mapvals[1] = mapvals[1].mul(zpows[1]);

    // multiply result of Y map by the y-coordinate y / z^3
    mapvals[2] = mapvals[2].mul(y);
    mapvals[3] = mapvals[3].mul(z.pow(3));

    FP2Immutable zz = mapvals[1].mul(mapvals[3]);
    FP2Immutable xx = mapvals[0].mul(mapvals[3]).mul(zz);
    FP2Immutable yy = mapvals[2].mul(mapvals[1]).mul(zz).mul(zz);

    return new JacobianPoint(xx, yy, zz);
  }

  /**
   * Addition chain for multiplication by 0xd201000000010000 == -x, the BLS parameter.
   *
   * @param p the point to be multiplied
   * @return -x * p
   */
  static JacobianPoint mx_chain(JacobianPoint p) {
    JacobianPoint q = p.dbl();
    int[] ndoubles = {2, 3, 9, 32, 16};
    for (int n : ndoubles) {
      q = q.add(p);
      for (int j = 0; j < n; j++) {
        q = q.dbl();
      }
    }
    return q;
  }

  // Shortcut Frobenius evaluation that avoids going all the way to Fq12
  private static FP2Immutable qi_x(FP2Immutable x) {
    FP a = new FP(x.getFp2().getA());
    FP b = new FP(x.getFp2().getB());
    a.mul(k_qi_x);
    b.mul(k_qi_x);
    b.neg();
    return new FP2Immutable(new FP2(a, b));
  }

  // Shortcut Frobenius evaluation that avoids going all the way to Fq12
  private static FP2Immutable qi_y(FP2Immutable y) {
    FP y0 = new FP(y.getFp2().getA());
    FP y1 = new FP(y.getFp2().getB());
    FP a = new FP(y0);
    FP b = new FP(y0);
    a.add(y1);
    a.mul(k_qi_y);
    b.sub(y1);
    b.mul(k_qi_y);
    return new FP2Immutable(new FP2(a, b));
  }

  // The untwist-Frobenius-twist endomorphism
  static JacobianPoint psi(JacobianPoint p) {
    FP2Immutable x = new FP2Immutable(p.getX());
    FP2Immutable y = new FP2Immutable(p.getY());
    FP2Immutable z = new FP2Immutable(p.getZ());

    FP2Immutable z2 = z.sqr();
    FP2Immutable px = k_cx.mul(qi_x(iwsc.mul(x)));
    FP2Immutable pz2 = qi_x(iwsc.mul(z2));
    FP2Immutable py = k_cy.mul(qi_y(iwsc.mul(y)));
    FP2Immutable pz3 = qi_y(iwsc.mul(z2).mul(z));

    FP2Immutable zOut = pz2.mul(pz3);
    FP2Immutable xOut = px.mul(pz3).mul(zOut);
    FP2Immutable yOut = py.mul(pz2).mul(zOut).mul(zOut);

    return new JacobianPoint(xOut, yOut, zOut);
  }

  /**
   * Fast cofactor clearing using the untwist-Frobenius-twist Endomorphism.
   *
   * <p>We use the version given in section 4.1 of Budroni and Pintore, "Efficient hash maps to G2
   * on BLS curves," ePrint 2017/419 https://eprint.iacr.org/2017/419 NOTE: this impl works for
   * Jacobian projective coordinates without computing an inversion.
   *
   * @param p the point to be transformed to the G2 group
   * @return a corresponding point in the G2 group
   */
  static JacobianPoint clear_h2(JacobianPoint p) {
    // (-x + 1) P
    JacobianPoint work = mx_chain(p).add(p);
    // -psi(P)
    JacobianPoint minus_psi_p = psi(p).neg();
    // (-x + 1) P - psi(P)
    work = work.add(minus_psi_p);
    // (x^2 - x) P + x psi(P)
    work = mx_chain(work);
    // (x^2 - x) P + (x - 1) psi(P)
    work = work.add(minus_psi_p);
    // (x^2 - x - 1) P + (x - 1) psi(P)
    work = work.add(p.neg());
    // psi(psi(2P))
    JacobianPoint psi_psi_2p = psi(psi(p.dbl()));
    // (x^2 - x - 1) P + (x - 1) psi(P) + psi(psi(2P))
    work = work.add(psi_psi_2p);

    return work;
  }
}
